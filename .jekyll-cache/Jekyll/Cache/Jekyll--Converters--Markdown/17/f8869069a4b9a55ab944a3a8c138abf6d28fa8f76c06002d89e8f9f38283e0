I"0<p>함수형 프로그래밍에 대한 이해</p>
<h3 id="array-알아보기">Array 알아보기</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>
    <span class="nx">array</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">// 이터레이터 null ( 없애면 )</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">a</span> <span class="k">of</span> <span class="nx">arr</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// 동작하지 않는다.</span>
    <span class="c1">// array 는 Symbol.iterator 라는 메서드를 가지고 있다.</span>
    <span class="nx">array</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">values</span><span class="p">()</span> <span class="p">{</span> <span class="p">[</span> <span class="nx">native</span> <span class="nx">code</span> <span class="p">]</span> <span class="p">}</span>
    <span class="nx">arr</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]()</span> <span class="o">=&gt;</span> <span class="nb">Array</span> <span class="nx">Iterator</span> <span class="p">{}</span>

    <span class="kd">let</span> <span class="nx">iterator</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]();</span>
    <span class="nx">iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span> <span class="c1">// { value : 1, done : false }</span>
    <span class="nx">iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span> <span class="c1">// { value : 2, done : false }</span>
    <span class="nx">iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span> <span class="c1">// { value : 3, done : false }</span>
    <span class="nx">iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span> <span class="c1">// { value : undefined, done : true }</span>

</code></pre></div></div>
<h3 id="set-알아보기">Set 알아보기</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">const</span> <span class="kd">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]);</span>

    <span class="kd">const</span> <span class="nx">iter1</span> <span class="o">=</span> <span class="kd">set</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]();</span>
    <span class="nx">iter1</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>

    <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">a</span> <span class="k">of</span> <span class="nx">iter1</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// result = 2, 3</span>
</code></pre></div></div>
<h3 id="map-알아보기">Map 알아보기</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Map</span><span class="p">([[</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">],[</span><span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">],[</span><span class="dl">'</span><span class="s1">c</span><span class="dl">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]);</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">const</span> <span class="nx">a</span> <span class="k">of</span> <span class="nx">map</span><span class="p">.</span><span class="nx">keys</span><span class="p">())</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// a, b, c</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">const</span> <span class="nx">a</span> <span class="k">of</span> <span class="nx">map</span><span class="p">.</span><span class="nx">values</span><span class="p">())</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// 1, 2, 3</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">a</span> <span class="k">of</span> <span class="nx">map</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// ['a', 1],['b', 2],['c', 3]</span>
</code></pre></div></div>

<h3 id="이터러블--이터레이터-프로토콜">이터러블 / 이터레이터 프로토콜</h3>
<ul>
  <li>이터러블 : 이터레이터를 리턴하는 <a href="">Symbol.iterator</a> 를 가진 값</li>
  <li>이터레이터 : { value , done } 객체를 리턴하는 next() 를 가진 값</li>
  <li>이터러블/이터레이터 프로토콜  : 이터러블을 for…of, 전개 연산자 등과 함께 동작하도록 한 규약</li>
</ul>

<h3 id="스스로-정리">스스로 정리</h3>
<ul>
  <li>이터러블은 이터레이터를 리턴하는 <a href="">Symbol.iterator</a> 메서드를 가진 값이다.<br />
Array, Set, Map 객체 모두 이터러블 값이라고 할 수 있다.</li>
  <li>이터레이터는 value 와 done 객체를 리턴하는 next() 메서드를 가졌다.
    <ol>
      <li>array 는 Symbol.iterator 를 가졌고 이건 이터레이터를 리턴하는 메서드다.</li>
      <li>해당 메서드를 호출하면 이터레이터 객체가 나오고 해당 객체는 next() 메서드를 가진다.</li>
      <li>next() 메서드를 호출하면 { value : T , done : boolean } 객체가 리턴된다.</li>
    </ol>
  </li>
  <li>이터러블/이터레이터 프로토콜은 for…of 문을 이터러블 객체와 함께 사용하면 동작되도록 한 규약이다.</li>
</ul>

<h3 id="사용자-정의-이터러블을-통해-알아보기">사용자 정의 이터러블을 통해 알아보기</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">const</span> <span class="nx">iterable</span> <span class="o">=</span> <span class="p">{</span>
        <span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]()</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
            <span class="k">return</span> <span class="p">{</span>
                <span class="nx">next</span><span class="p">()</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="nx">i</span> <span class="o">==</span> <span class="mi">0</span> 
                    <span class="p">?</span> <span class="p">{</span> <span class="na">value</span> <span class="p">:</span> <span class="kc">undefined</span><span class="p">,</span> <span class="na">done</span> <span class="p">:</span> <span class="kc">true</span> <span class="p">}</span> 
                    <span class="p">:</span> <span class="p">{</span> <span class="na">value</span> <span class="p">:</span> <span class="nx">i</span><span class="o">--</span><span class="p">,</span> <span class="na">done</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}</span>
                <span class="p">},</span>
                <span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">;</span> <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="kd">let</span> <span class="nx">iterator</span> <span class="o">=</span> <span class="nx">iterable</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]();</span>
    <span class="nx">iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span> <span class="c1">// { value : 3 , done : false }</span>
    <span class="nx">iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span> <span class="c1">// { value : 2 , done : false }</span>
    <span class="nx">iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span> <span class="c1">// { value : 1 , done : false }</span>
    <span class="nx">iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span> <span class="c1">// { value : undefined , done : true }</span>

    <span class="k">for</span><span class="p">(</span><span class="kd">const</span> <span class="nx">a</span> <span class="k">of</span> <span class="nx">iterable</span><span class="p">)</span> <span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>

    <span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
    <span class="kd">let</span> <span class="nx">iter2</span> <span class="o">=</span> <span class="nx">array</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]();</span>
    <span class="nx">iter2</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
    <span class="c1">// iter2 역시 iter2[Symbol.iterator] 을 가지고 있어야한다.</span>
    <span class="nx">iter2</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]()</span> <span class="o">==</span> <span class="nx">iter2</span> <span class="c1">// true</span>
    <span class="c1">// Well formed iterator</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">const</span> <span class="nx">a</span> <span class="k">of</span> <span class="nx">iter2</span><span class="p">)</span> <span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// 2 , 3</span>
    <span class="c1">// 이터레이터를 for of 문에 넣었을 때 남은 배열을 순회 할 수 있게 해야 한다.</span>
</code></pre></div></div>
:ET